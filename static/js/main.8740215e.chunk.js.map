{"version":3,"sources":["containers/ninovation.png","components/Card.js","components/CardList.js","components/SearchBox.js","robots.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","name","email","id","className","alt","src","CardList","robots","map","user","rbt","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","username","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","robot","toLowerCase","includes","href","ninovation","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8740215e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ninovation.bf9bd1ec.png\";","import React from 'react';\r\n\r\nconst Card = ({name, email, id} ) => {\r\n    return (\r\n        <div className='tc dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?250x250`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>  \r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, rbt) => {\r\n                    return (\r\n                        <Card \r\n                        key={rbt} \r\n                        id={robots[rbt].id} \r\n                        name={robots[rbt].name} \r\n                        email={robots[rbt].email} \r\n                        />\r\n                    );\r\n                })\r\n            };\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n            className='pa3 ba b--light-blue bg-lightest-blue' \r\n            type='search' \r\n            placeholder='Search robots'\r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","export const robots = [\r\n    {\r\n      id: 1,\r\n      name: 'Niko Nicolas',\r\n      username: 'NL',\r\n      email: 'Ninovationlab@gmail.com'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Swazik Maboo',\r\n      username: 'Swazik',\r\n      email: 'Services@swazik.com'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Sabree Hypnosis',\r\n      username: 'Hypno',\r\n      email: 'Hypnose@sabrina.com'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Mareena Danee',\r\n      username: 'eMDee',\r\n      email: 'Emdee@mama.com'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Brigitta',\r\n      username: 'Brigistar',\r\n      email: 'brigistar@langeweile.com'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Dewi Diana',\r\n      username: 'Double D',\r\n      email: 'dd@doubled.com'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Ngurah Bumble',\r\n      username: 'Ngrh',\r\n      email: 'Ngurah@bumbledate.com'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Bradlee',\r\n      username: 'BI',\r\n      email: 'bi@13friday.com'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'Dd',\r\n      username: 'Dd',\r\n      email: 'Dd88@13friday.com'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'Deny',\r\n      username: 'Balphegor',\r\n      email: 'Balphegor@13friday.com'\r\n    },\r\n    {\r\n      id: 11,\r\n      name: 'Rangge',\r\n      username: 'Mr. R',\r\n      email: 'PlayboyCapCekerAyam@13friday.com'\r\n    },\r\n    {\r\n      id: 12,\r\n      name: 'Gus Korno',\r\n      username: 'Korno Mono',\r\n      email: 'Mono@13friday.com'\r\n    },\r\n    {\r\n      id: 13,\r\n      name: 'Durga',\r\n      username: 'Lawyah',\r\n      email: 'Lawyah@13friday.com'\r\n    },\r\n    {\r\n      id: 14,\r\n      name: 'Mankshyt',\r\n      username: 'Mankshyt',\r\n      email: 'Mankshyt@13friday.com'\r\n    },\r\n    {\r\n      id: 15,\r\n      name: 'Alex',\r\n      username: 'Alex',\r\n      email: 'Alex@13friday.com'\r\n    },\r\n    {\r\n      id: 16,\r\n      name: 'GusD Jr.',\r\n      username: 'GuzD',\r\n      email: 'Gusdjr@13friday.com'\r\n    },\r\n    {\r\n      id: 17,\r\n      name: 'Erik Youriko',\r\n      username: 'Youriko',\r\n      email: 'Japanesebytch@genx.com'\r\n    },\r\n    {\r\n      id: 18,\r\n      name: 'Gedoeg',\r\n      username: 'Gedoeg',\r\n      email: 'Doeggedoeg@genx.com'\r\n    },\r\n    {\r\n      id: 19,\r\n      name: 'Titux',\r\n      username: 'Titux',\r\n      email: 'Rapistdiamond@genx.com'\r\n    },\r\n    {\r\n      id: 20,\r\n      name: 'Jro Jevan',\r\n      username: 'Jro',\r\n      email: 'Jrojevan@jlememales.com'\r\n    }\r\n  ];","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '3px solid #00dddd', height: '75vh'}}>\r\n            {props.children};\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport {robots} from '../robots';\r\nimport './App.css';\r\nimport ninovation from './ninovation.png';\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\nclass App  extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: robots,\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        });\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className='f1'>Robo ~ Family</h1>\r\n                <p>\r\n                    Welcome and meet my family that I turned into robots using React.js in my first ever experiment. Type in their name, if you want to see closely how cool they are!\r\n                </p>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                    <CardList robots={filteredRobots}/>\r\n                </Scroll>\r\n                <a href='https://github.com/Ninovation-lab'><img alt='logo' src={ninovation} /></a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}